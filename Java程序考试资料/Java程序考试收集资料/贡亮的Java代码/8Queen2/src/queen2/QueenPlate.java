/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QueenPlate.java
 *
 * Created on 2011-1-15, 10:36:20
 */

package queen2;

import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JOptionPane;

/**
 *
 * @author student
 */
public class QueenPlate extends javax.swing.JPanel {

    /** Creates new form QueenPlate */
    public QueenPlate() {
        initComponents();
        this.repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g){
        drawPlate(g);
        drawQueens(g);
    }

    protected void drawPlate(Graphics g){
        g.setColor(Color.white);
        g.fillRect(0, 0, this.getWidth(), this.getHeight());
        int cubeWidth = this.getWidth()/8;
        int cubeHeight = this.getHeight()/8;

        g.setColor(Color.blue);
        for(int i=1;i<8;i++){
            g.drawLine(i*cubeWidth, 0, i*cubeWidth, this.getHeight());
            g.drawLine(0, i*cubeHeight, this.getWidth(), i*cubeHeight);
        }
    }

    private boolean[][] plate = new boolean[8][8];

    private int n = 0;
    public void putQueen(int x, int y){
        int xIndex = x/(this.getWidth()/8);
            int yIndex = y/(this.getHeight()/8);

        if(plate[xIndex][yIndex]){
            plate[xIndex][yIndex] = false;
            n--;
            this.repaint();
            return ;
        }
        if(CheckValid(x,y)){
            plate[xIndex][yIndex] = true;
            this.repaint();
            n++;
            if(n==8){
                JOptionPane.showMessageDialog(null, "you win!");
                
                restartGame();
                return ;
            }
        }
        this.repaint();
    }

    public boolean CheckValid(int x, int y){
        int xIndex = x/(this.getWidth()/8);
        int yIndex = y/(this.getHeight()/8);


        for(int i=0;i<8;i++){
            if(plate[xIndex][i]==true&&!(i==yIndex)){
                JOptionPane.showMessageDialog(null, "conflict with Queen on Line: " + (xIndex+1) + "Column: " + (i+1));
                return false;
            }

            if(plate[i][yIndex]==true&&!(i==xIndex)){
                JOptionPane.showMessageDialog(null, "conflict with Queen on Line: " + (i+1) + "Column: " + (yIndex+1));
                return false;
            }

        }

        for(int i=xIndex;i<8;i++){
            y = yIndex+i-xIndex;
            if(y<8){
                if(plate[i][y]){
                    JOptionPane.showMessageDialog(null, "conflict with Queen on Line: " + (i+1) + "Column: " + (y+1));
                    return false;
                }

            }

            y = yIndex - (i-xIndex);
            if(y>=0){
                if(plate[i][y]){
                    JOptionPane.showMessageDialog(null, "conflict with Queen on Line: " + (i+1) + "Column: " + (y+1));
                    return false;
                }
            }

        }


        for(int i=0;i<xIndex;i++){
            y = yIndex+(xIndex-i);
            if(y<8){
                if(plate[i][y]){
                    JOptionPane.showMessageDialog(null, "conflict with Queen on Line: " + (i+1) + "Column: " + (y+1));
                    return false;
                }

            }

            y = yIndex - (xIndex-i);
            if(y>=0){
                if(plate[i][y]){
                    JOptionPane.showMessageDialog(null, "conflict with Queen on Line: " + (i+1) + "Column: " + (y+1));
                    return false;
                }
            }

        }

        return true;
    }

    private void drawQueens(Graphics g) {
        g.setColor(Color.black);
        for(int i=0;i<8;i++){
            for(int j=0;j<8;j++){
                if(plate[i][j]){
                    g.drawString("Q", (int)((i+0.25)*(this.getWidth()/8)), (int)((j+0.25)*(this.getHeight()/8)));
                }
            }
        }
    }

    private void restartGame() {
        this.plate = new boolean[8][8];
        n = 0;
        this.repaint();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
