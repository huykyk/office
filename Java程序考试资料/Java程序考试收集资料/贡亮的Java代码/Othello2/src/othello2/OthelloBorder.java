/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OthelloBorder.java
 *
 * Created on 2011-1-15, 11:24:47
 */

package othello2;

import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JOptionPane;

/**
 *
 * @author student
 */
public class OthelloBorder extends javax.swing.JPanel {

    /** Creates new form OthelloBorder */
    public OthelloBorder() {
        initComponents();
        this.init();
        this.repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    @Override
    protected void paintComponent(Graphics g){
        drawBoard(g);
        this.drawElements(g);
    }

    public void init(){
        elements = new int[8][8];
        elements[3][3]=1;
        elements[4][3]=2;
        elements[3][4]=2;
        elements[4][4]=1;
    }

    private int elements[][] = new int[8][8];

    private void drawElements(Graphics g){

        int cubeWidth = this.getWidth()/8;
        int cubeHeight = this.getHeight()/8;
        for(int i=0;i<elements.length;i++){
            for(int j=0;j<elements[0].length;j++){
                if(elements[i][j]==1){
                    g.setColor(Color.white);
                    g.fillOval(i*cubeWidth, j*cubeHeight, cubeWidth, cubeHeight);
                }else if(elements[i][j]==2){
                    g.setColor(Color.black);
                    g.fillOval(i*cubeWidth, j*cubeHeight, cubeWidth, cubeHeight);
                }
            }
        }
    }

    private boolean isWhite = false;

    public void putElement(int x, int y){
        int cubeWidth = this.getWidth()/8;
        int cubeHeight = this.getHeight()/8;
        int xIndex = x/cubeWidth;
        int yIndex = y/cubeHeight;
        
        if(elements[xIndex][yIndex]==0){
            if(isWhite){
               elements[xIndex][yIndex] = 1;
            }else{
               elements[xIndex][yIndex] = 2;
            }
            boolean reversed = this.checkAndReverse(xIndex, yIndex);
            if(reversed==false){
                elements[xIndex][yIndex] = 0;
            }else{
                isWhite = !isWhite;
            }
        }
        this.repaint();
        this.calculate();
    }

    public boolean checkAndReverse(int x, int y){
        boolean reversed = false;
        //check right
        for(int i=x+1;i<7;i++){
            if(elements[i][y]==0){
                break;
            }
            if(elements[i][y]==elements[x][y]){
                for(int j = i-1;j>x;j--){
                    reversed = true;
                    elements[j][y] = elements[x][y];
                }
                break;
            }
        }

        //check left
        for(int i=x-1;i>=0;i--){
            if(elements[i][y]==0){
                break;
            }
            if(elements[i][y]==elements[x][y]){
                for(int j = i+1;j<x;j++){
                    reversed = true;
                    elements[j][y] = elements[x][y];
                }
                break;
            }
        }


        //check up
        for(int i=y-1;i>=0;i--){
            if(elements[x][i]==0){
                break;
            }
            if(elements[x][i]==elements[x][y]){
                for(int j = i+1;j<y;j++){
                    reversed = true;
                    elements[x][j] = elements[x][y];
                }
                break;
            }
        }


        //check down
        for(int i=y+1;i<8;i++){
            if(elements[x][i]==0){
                break;
            }
            if(elements[x][i]==elements[x][y]){
                for(int j = i-1;j>y;j--){
                    reversed = true;
                    elements[x][j] = elements[x][y];
                }
                break;
            }
        }

        //check right up
        for(int i = x+1, j = y-1;i<7&&j>=0;i++,j--){
            if(elements[i][j]==0){
                break;
            }
            if(elements[i][j]==elements[x][y]){
                i--;
                j++;
                while(i!=x){
                    elements[i][j] = elements[x][y];
                    i--;
                    j++;
                    reversed = true;
                }
                break;
            }
        }

        //check left up
        for(int i = x-1, j = y-1;i>=0&&j>=0;i--,j--){
            if(elements[i][j]==0){
                break;
            }
            if(elements[i][j]==elements[x][y]){
                i++;
                j++;
                while(i!=x){
                    elements[i][j] = elements[x][y];
                    i++;
                    j++;
                    reversed = true;
                }
                break;
            }
        }

        //check left down
        for(int i = x-1, j = y+1;i>=0&&j<7;i--,j++){
            if(elements[i][j]==0){
                break;
            }
            if(elements[i][j]==elements[x][y]){
                i++;
                j--;
                while(i!=x){
                    elements[i][j] = elements[x][y];
                    i++;
                    j--;
                    reversed = true;
                }
                break;
            }
        }

        //check right down
        for(int i = x+1, j = y+1;i<7&&j<7;i++,j++){
            if(elements[i][j]==0){
                break;
            }
            if(elements[i][j]==elements[x][y]){
                i--;
                j--;
                while(i!=x){
                    elements[i][j] = elements[x][y];
                    i--;
                    j--;
                    reversed = true;
                }
                break;
            }
        }

        return reversed;
    }


    private void drawBoard(Graphics g) {

        int cubeWidth = this.getWidth()/8;
        int cubeHeight = this.getHeight()/8;

        g.setColor(Color.green);
        g.fillRect(0, 0, this.getWidth(), this.getHeight());
        g.setColor(Color.white);
        for(int i=1;i<8;i++){
            g.drawLine(0, i*cubeHeight,this.getWidth(), i*cubeHeight);
            g.drawLine(i*cubeWidth, 0, i*cubeWidth, this.getHeight());
        }
    }

    public void calculate(){
        int total=0, white = 0, black = 0;
        for(int i=0;i<elements.length;i++){
            for(int j=0;j<elements[0].length;j++){
                if(elements[i][j]==1){
                    total++;
                    white++;
                }else if(elements[i][j]==2){
                    total++;
                    black++;
                }
            }
        }

        if(total==64){
            String message = "white: " + white+"\r\n";
            message += "black: " + black + "\r\n";
            if(black>white){
                message += "Winer: black";
            }else if(black<white){
                message += "Winer: white";
            }else{
                message += "Tie";
            }
            JOptionPane.showMessageDialog(null, message);
            this.init();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
