/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PlateBorder.java
 *
 * Created on 2011-1-15, 15:00:26
 */

package points;

import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JOptionPane;

/**
 *
 * @author student
 */
public class PlateBorder extends javax.swing.JPanel {

    /** Creates new form PlateBorder */
    public PlateBorder() {
        initComponents();
        init();
        this.repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private int cubeWidth = 0;
    private int cubeHeight = 0;

    protected void init(){
        plate = new int[16][16];
        
    }
    private int [][]plate = null;

    private int curSide = 1;

    /**
     * change another side to put element
     */
    protected void reverseSide(){
        curSide = curSide%2+1;
    }

    @Override
    protected void paintComponent(Graphics g){
        drawPlate(g);
        drawElements(g);
    }

    public void putElement(int x, int y){
        int xIndex = (x)/cubeWidth;
        if(x%cubeWidth>cubeWidth/2){
            xIndex++;
        }
        int yIndex = (y)/cubeHeight;
        if(y%cubeHeight>cubeHeight/2){
            yIndex++;
        }
        if(plate[xIndex][yIndex]==0){
            plate[xIndex][yIndex] = curSide;
            reverseSide();
            this.repaint();
            this.check(xIndex,yIndex);
        }
    }

    private void drawPlate(Graphics g) {
        cubeWidth = this.getWidth()/16;
        cubeHeight = this.getHeight()/16;
        g.setColor(Color.lightGray);
        g.fillRect(0,0,this.getWidth(), this.getHeight());
        g.setColor(Color.black);
        for(int i=1;i<16;i++){
            g.drawLine(0, i*cubeHeight, this.getWidth(), i*cubeHeight);
            g.drawLine(i*cubeWidth, 0, i*cubeWidth, this.getHeight());
        }
    }

    /**
     * draw all elements
     * @param g
     */
    private void drawElements(Graphics g) {
        for(int i=0;i<16;i++){
            for(int j=0;j<16;j++){
                if(plate[i][j]==1){
                    g.setColor(Color.white);
                    g.fillOval(i*cubeWidth - cubeWidth/4, j*cubeHeight - cubeHeight/4, cubeWidth/2, cubeHeight/2);
                }else if(plate[i][j]==2){
                    g.setColor(Color.black);
                    g.fillOval(i*cubeWidth - cubeWidth/4, j*cubeHeight - cubeHeight/4, cubeWidth/2, cubeHeight/2);
                }
            }
        }
    }

    protected void check(int xIndex, int yIndex){
        int number = 0;
        int side = 0;


        for(int i=0;i<16;i++){
            if(plate[i][yIndex]==side&&side!=0){
                number++;
                if(number>=5){
                    gameOver(side);
                    return ;
                }
            }else{
                side = plate[i][yIndex];
                number = 1;
            }
        }
        

        
        number = 0;
        side = 0;
        for(int i=0;i<16;i++){
            if(plate[xIndex][i]==side&&side!=0){
                number++;
                if(number>=5){
                    gameOver(side);
                    return ;
                }
            }else{
                side = plate[xIndex][i];
                number = 1;
            }
        }

        number = 0;
        side = 0;
        int a = Math.min(xIndex, yIndex);
        int x = xIndex - a;
        int y = yIndex - a;
        for(int i=x, j=y;i<16&& j<16;i++,j++){
            if(plate[i][j]==side&&side!=0){
                number++;
                if(number>=5){
                    gameOver(side);
                    return ;
                }
            }else{
                side = plate[i][j];
                number = 1;
            }
        }

        number = 0;
        side = 0;
        a = Math.min(xIndex, 15 - yIndex);
        x = xIndex - a;
        y = yIndex + a;
        for(int i=x, j=y;i<16&& j>=0;i++,j--){
            if(plate[i][j]==side&&side!=0){
                number++;
                if(number>=5){
                    gameOver(side);
                    return ;
                }
            }else{
                side = plate[i][j];
                number = 1;
            }
        }
    }

    private void gameOver(int side) {
        if(side==1){
            JOptionPane.showMessageDialog(null, "White win!");
        }else{
            JOptionPane.showMessageDialog(null, "Black win!");
        }
        this.init();
        this.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
