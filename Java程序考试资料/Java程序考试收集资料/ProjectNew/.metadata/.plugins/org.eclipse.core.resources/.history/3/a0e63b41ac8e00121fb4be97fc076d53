package cn.edu.xmu.software.eventprocesser;

import static com.googlecode.javacv.cpp.opencv_core.*; 
import static com.googlecode.javacv.cpp.opencv_highgui.*;  
import static com.googlecode.javacv.cpp.opencv_imgproc.*;  

import java.awt.Color;
import java.awt.FileDialog;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import java.nio.ByteBuffer;

import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.googlecode.javacv.cpp.opencv_core.CvScalar;

import cn.edu.xmu.software.curveExctraction.CurveExtractOpt;
import cn.edu.xmu.software.ui.DiffusionCurvesUI;
import cn.edu.xmu.software.util.Constants;
import cn.edu.xmu.software.util.MatOperate;
import cn.edu.xmu.software.util.Point;
import cn.edu.xmu.software.util.StaticData;
import cn.edu.xmu.software.util.TextureReader;
import cn.edu.xmu.software.util.TextureReader.Texture;
import cn.edu.xmu.software.util.TypeConversion;

/**
 * 控件基本事件监听
 * @author sinlly.chen
 *
 */
public class ControlsListener implements ActionListener,ChangeListener, ItemListener{
    private static DiffusionCurvesUI frame;
    private Image srcImage;
    private  int rValue;
    private  int gValue;
    private  int bValue;
    private static int index=0;//自定义颜色的序号
    private int selectBtnIndex;//选择的基本颜色的序号
    private int selectCustomBtnIndex;//选择的自定义颜色的序号
    private byte[] imageByte;
	public ControlsListener(DiffusionCurvesUI frame)
    {
    	this.frame=frame;
    }
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stuct
		if(e.getSource()==frame.getLoadBitmapItem()) //打开bitmap类型文件
			openFile("bitmap");
		else if(e.getSource()==frame.getLoadXmlItem())//打开xml类型文件
			openFile("xml");
		else if(e.getSource()==frame.getSaveAsPngItem())//保存bitmap格式文件
			saveFile("bitmap");
		else if(e.getSource()==frame.getSaveAsXmlItem())//保存xml格式文件
			saveFile("xml");
		else if(e.getSource()==frame.getrTxt())//rText值改变
			rValueChange();
		else if(e.getSource()==frame.getgTxt())//gText值改变
			gValueChange();
		else if(e.getSource()==frame.getbTxt())//bText值改变
			bValueChange();
		else if(e.getSource()==frame.getAddBtn())//添加自定义颜色
			addCustomColor();
		else if(chkColorSelect(e))//获得所选择的基本颜色
		{
			StaticData.currentSelColor=frame.getColorBtns().get(selectBtnIndex).getBackground();
			frame.getCustomBtn().setBackground(StaticData.currentSelColor);
			if(StaticData.isSelLColor)
			{
				frame.getlColorShowBtn().setBackground(StaticData.currentSelColor);
				StaticData.leftColor=StaticData.currentSelColor;
			}
			if(StaticData.isSelRColor)
			{
				frame.getrColorShowBtn().setBackground(StaticData.currentSelColor);
				StaticData.rightColor=StaticData.currentSelColor;
			}
		}
		else if(chkCustomColorSelect(e))//获得所选择的自定义颜色
		{
			StaticData.currentSelColor=frame.getCustomColorBtns().get(selectCustomBtnIndex).getBackground();
			frame.getCustomBtn().setBackground(StaticData.currentSelColor);
			if(StaticData.isSelLColor)
			{
				frame.getlColorShowBtn().setBackground(StaticData.currentSelColor);
				StaticData.leftColor=StaticData.currentSelColor;
			}
			if(StaticData.isSelRColor)
			{
				frame.getrColorShowBtn().setBackground(StaticData.currentSelColor);
				StaticData.rightColor=StaticData.currentSelColor;
			}
		}
		else if(e.getSource()==frame.getDrawBtn()){
			StaticData.isAddLines=true;
			StaticData.isZoomIn=false;
			StaticData.isZoomOut=false;
			StaticData.isHandPan=false;
			StaticData.isLoadPng=false;
			StaticData.isCurveExtract=false;
			StaticData.isCleanAll=false;
			StaticData.isDraw=true;
		}
		else if(e.getSource()==frame.getZoomInBtn()){
			StaticData.isAddLines=false;
			StaticData.isZoomIn=true;
			StaticData.isZoomOut=false;
			StaticData.isHandPan=false;
			StaticData.isLoadPng=false;
			StaticData.isCurveExtract=false;
			StaticData.isCleanAll=false;
			StaticData.isDraw=true;
			zoom(1);
		}
		else if(e.getSource()==frame.getZoomOutBtn()){
			StaticData.isAddLines=false;
			StaticData.isZoomIn=false;
			StaticData.isZoomOut=true;
			StaticData.isHandPan=false;
			StaticData.isCleanAll=false;
			StaticData.isLoadPng=false;
			StaticData.isCurveExtract=false;
			StaticData.isDraw=true;
			zoom(-1);
		}
		else if(e.getSource()==frame.getHandPanBtn()){
			StaticData.isAddLines=false;
			StaticData.isZoomIn=false;
			StaticData.isZoomOut=false;
			StaticData.isHandPan=true;
			StaticData.isLoadPng=false;
			StaticData.isCleanAll=false;
			StaticData.isCurveExtract=false;
			StaticData.isDraw=true;
		}
		else if(e.getSource()==frame.getSampleBtn())
		{
			StaticData.isAddLines=false;
			StaticData.isZoomIn=false;
			StaticData.isZoomOut=false;
			StaticData.isHandPan=false;
			StaticData.isCleanAll=false;
			StaticData.isCurveExtract=true;
			sample();
		}
		else if(e.getSource()==frame.getCartoonChk()&&frame.getCartoonChk().isSelected())
		{
			StaticData.isCartoon=true;
		}
		else if(e.getSource()==frame.getCartoonChk()&&!frame.getCartoonChk().isSelected())
		{
			StaticData.isCartoon=false;
		}
		else if(e.getSource()==frame.getCleanAllBtn())
		{
			StaticData.isAddLines=false;
			StaticData.isZoomIn=false;
			StaticData.isZoomOut=false;
			StaticData.isHandPan=false;
			StaticData.isCurveExtract=false;
			StaticData.isDraw=false;
			StaticData.isLoadPng=false;
			StaticData.isCleanAll=true;
			frame.getGLCanvas().display();
		}
		else if(e.getSource()==frame.getlColorBtn())
		{
			StaticData.isSelLColor=true;
			StaticData.isSelRColor=false;
		}
		else if(e.getSource()==frame.getrColorBtn())
		{
			StaticData.isSelRColor=true;
			StaticData.isSelLColor=false;
		}
		else if(e.getSource()==frame.getSmoothBtn())
		{
			StaticData.isAddLines=false;
			StaticData.isZoomIn=false;
			StaticData.isZoomOut=false;
			StaticData.isHandPan=false;
			StaticData.isCurveExtract=false;
			StaticData.isDraw=false;
			StaticData.isCleanAll=false;
			StaticData.isBlurImage=true;
		}
	}
	@Override
	public void stateChanged(ChangeEvent e) {
		// TODO Auto-generated method stub
		if(e.getSource()==frame.getrSlider())//改变r滚动条
		{
			frame.getrTxt().setText(String.valueOf(frame.getrSlider().getValue()));
			getRGBColorValue();
			frame.getRgbColorBtn().setBackground(new Color(rValue,gValue,bValue));
		}
		else if(e.getSource()==frame.getgSlider())//改变g滚动条
	    {
			frame.getgTxt().setText(String.valueOf(frame.getgSlider().getValue()));
			getRGBColorValue();
			frame.getRgbColorBtn().setBackground(new Color(rValue,gValue,bValue));
		}
		else if(e.getSource()==frame.getbSlider())//改变b滚动条
		{
			frame.getbTxt().setText(String.valueOf(frame.getbSlider().getValue()));
			getRGBColorValue();
			frame.getRgbColorBtn().setBackground(new Color(rValue,gValue,bValue));
		}
	}
	
	@Override
	public void itemStateChanged(ItemEvent arg0) {
		if(frame.getSplineChk().isSelected()){
			StaticData.isShowSplines=true;
			frame.getGLCanvas().display();
		}
		else{
			StaticData.isShowSplines=false;
			frame.getGLCanvas().display();
		}
	}
	
	/**
	 * 打开文件
	 * @param fileType
	 */
	public void openFile(String fileType)
	{
		FileDialog openDialog=new FileDialog(frame,"打开文件",FileDialog.LOAD);
		String fileName;
		String dir;
		openDialog.show(); 
		if(fileType.equals("bitmap"))
		{
		    fileName=openDialog.getFile();
		    dir=openDialog.getDirectory();
		    if(fileName!=null)
		    {
		    	try {
					Texture image = TextureReader.readTexture(dir+fileName, true);
					StaticData.isAddLines=false;
					StaticData.isZoomIn=false;
					StaticData.isZoomOut=false;
					StaticData.isHandPan=false;
					StaticData.isLoadPng=true;
					StaticData.imgHeight=image.getHeight();
					StaticData.imgWidth=image.getWidth();
					StaticData.imgBuf=image.getPixels();
					frame.getGLCanvas().display();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		    }
		}
		else if(fileType.equals("xml"))
		{
			openDialog.setFile("*.xml");
			fileName=openDialog.getFile();
		    dir=openDialog.getDirectory();
		}
		openDialog.dispose();
	}
	/**
	 * 保存文件
	 * @param fileType
	 */
    public void saveFile(String fileType)
    {
    	FileDialog saveDialog=new FileDialog(frame,"保存文件",FileDialog.SAVE);
		String fileName;
		String dir;
		saveDialog.show();
		if(fileType.equals("bitmap"))
		{
		    fileName=saveDialog.getFile();
		    dir=saveDialog.getDirectory();
		    if(fileName!=null)
		    {
                if(getCurrentImageMat())
                {
                	cvSaveImage(dir+fileName, StaticData.rgbaImage);
                	//IplImage  image=new IplImage(StaticData.rgbaImage)

//                	GaussianBlur(StaticData.rgbaImage, StaticData.rgbaImage, cvSize(3, 3), 0,0.0,0);
//                	cvShowImage("blur2",StaticData.rgbaImage);
//                	GaussianBlur(StaticData.rgbaImage, StaticData.rgbaImage, cvSize(3, 3), 0,0.0,0);
//                	cvShowImage("blur3",StaticData.rgbaImage);
                	
                	JOptionPane.showMessageDialog(frame, "Image save success", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
                else 
                	JOptionPane.showMessageDialog(frame, "Image save fail", "Failure", JOptionPane.ERROR_MESSAGE);
             }
		}
		else if(fileType.equals("xml"))
		{
			fileName=saveDialog.getFile();
		    dir=saveDialog.getDirectory();
		}
		saveDialog.dispose();
    }

 /**
  * 获得当前图像的矩阵
  * @param fileName
  * @return
  */
public static boolean  getCurrentImageMat()  
{  
	frame.getGLCanvas().display();
	byte[] data=StaticData.screenBuf.array();
	int k=0;
    for(int i=(int)Constants.drawWidth-1;i>=0;i--)
    {
    	for(int j=0;j<(int)Constants.drawWidth;j++)
    	{
    		CvScalar color=new CvScalar(data[k+2]*2+1,data[k+1]*2+1,data[k]*2+1,data[k+3]*2+1);
    		cvSet2D(StaticData.rgbaImage,i,j,color);
    		k+=4;
    	}
    }
    return true;
}  
	/**
	 * 改变rValue的值，触发颜色button改变颜色以及Slider值改变
	 */
	public void rValueChange()
	{
		rValue=0;
		gValue=Integer.valueOf(frame.getgTxt().getText());
		bValue=Integer.valueOf(frame.getbTxt().getText());
		if(frame.getrTxt().getText().equals("")||frame.getrTxt().getText()==null)
			rValue=0;
		else if(Integer.valueOf(frame.getrTxt().getText())>255)
			rValue=255;
		else 
			rValue=Integer.valueOf(frame.getrTxt().getText());
		frame.getrSlider().setValue(rValue);
		frame.getRgbColorBtn().setBackground(new Color(rValue,gValue,bValue));
	}
	/**
	 * 改变gValue的值，触发颜色button改变颜色以及Slider值改变
	 */
	public void gValueChange()
	{
		rValue=Integer.valueOf(frame.getgTxt().getText());
		gValue=0;
		bValue=Integer.valueOf(frame.getbTxt().getText());
		if(frame.getgTxt().getText().equals("")||frame.getgTxt().getText()==null)
			gValue=0;
		else if(Integer.valueOf(frame.getrTxt().getText())>255)
			gValue=255;
		else 
			gValue=Integer.valueOf(frame.getgTxt().getText());
		frame.getgSlider().setValue(gValue);
		frame.getRgbColorBtn().setBackground(new Color(rValue,gValue,bValue));
	}
	/**
	 * 改变bValue的值，触发颜色button改变颜色以及Slider值改变
	 */
	public void bValueChange()
	{
		rValue=Integer.valueOf(frame.getrTxt().getText());
		gValue=Integer.valueOf(frame.getgTxt().getText());
		bValue=0;
		if(frame.getbTxt().getText().equals("")||frame.getbTxt().getText()==null)
			bValue=0;
		else if(Integer.valueOf(frame.getbTxt().getText())>255)
			bValue=255;
		else 
			bValue=Integer.valueOf(frame.getbTxt().getText());
		frame.getbSlider().setValue(bValue);
		frame.getRgbColorBtn().setBackground(new Color(rValue,gValue,bValue));
	}
	/**
	 * 获得最新的三种颜色值
	 */
	public void getRGBColorValue()
	{
		rValue=Integer.valueOf(frame.getrTxt().getText());
		gValue=Integer.valueOf(frame.getgTxt().getText());
		bValue=Integer.valueOf(frame.getbTxt().getText());
	}
	/**
	 * 添加自定义颜色
	 */
	public void addCustomColor()
	{
		getRGBColorValue();
		Color c=new Color(rValue,gValue,bValue);
		frame.getCustomColorBtns().get(index).setBackground(c);
		index++;
		if(index>=36)
			index=0;
	}
	/**
	 * 判断是否选择基本颜色
	 * @param e
	 * @return
	 */
	public boolean chkColorSelect(ActionEvent e)
	{
		for(int i=0;i<frame.getColorBtns().size();i++)
		{
			if(e.getSource()==frame.getColorBtns().get(i))
			{
				selectBtnIndex=i;
				return true;
			}
		}
		return false;
	}
	/**
	 * 判断是否选择自定义颜色
	 * @param e
	 * @return
	 */
	public boolean chkCustomColorSelect(ActionEvent e)
	{
		for(int i=0;i<frame.getCustomColorBtns().size();i++)
		{
			if(e.getSource()==frame.getCustomColorBtns().get(i))
			{
				selectCustomBtnIndex=i;
				return true;
			}
		}
		return false;
	}
	/**
	 * 抽取图片特征曲线
	 */
	public void sample()
	{
		getCurrentImageMat();
		//cvCvtColor(StaticData.rgbaImage ,StaticData.grayImage, CV_RGBA2GRAY);
		for(int i=0;i<Constants.drawWidth;i++)
		{
			for(int j=0;j<Constants.drawWidth;j++)
			{
				CvScalar color=cvGet2D(StaticData.rgbaImage,i,j);
				int grayValue=(int)(((int)color.getVal(0)*0.3+(int)color.getVal(1)*0.6+(int)color.getVal(2)*0.1));
				StaticData.grayImage.put(i,j,grayValue);
			}
		}
	    cvNormalize(StaticData.grayImage, StaticData.grayImage, 0, 1, NORM_MINMAX,null);
	    CurveExtractOpt opt=new CurveExtractOpt();
	    if(StaticData.isCartoon)
	        opt.CurveOperate(StaticData.grayImage, true);
	    else 
	    	opt.CurveOperate(StaticData.grayImage, false);
	    StaticData.edges=opt.getEdges();
	    StaticData.isLoadPng=false;
	    StaticData.isDraw=false;
	    frame.getGLCanvas().display();

	}
	/**
	 * @return the srcImage
	 */
	public Image getSrcImage() {
		return srcImage;
	}
	/**
	 * @param srcImage the srcImage to set
	 */
	public void setSrcImage(Image srcImage) {
		this.srcImage = srcImage;
	}
	
	/*
	 * @param zoom in if num=1, zoom out if num=-1
	 */
	public void zoom(int num){
		float lastgScale=StaticData.gScale;
		StaticData.gScale+=num*0.1f;
		if(StaticData.gScale<0.1)
			StaticData.gScale=0.1f;
		else if(StaticData.gScale>3)
			StaticData.gScale=3;
		int vpx=-(int)(Constants.drawWidth*(StaticData.gScale-lastgScale))/2;
		int vpy=vpx;
		StaticData.gDx+=vpx;
		StaticData.gDy+=vpy;
		frame.getGLCanvas().display();
	}
	public static void blur(Point p)
	{
		CvMat localMat=MatOperate.getEightNeborM(p);
		GaussianBlur(localMat, localMat, cvSize(3, 3), 0.0,0.0,0);
		int k=0;
	    CvScalar color,c;
	    for(int i=0;i<100;i++)
	    {
	    	for(int j=0;j<100;j++)
	    	{
	    		color=cvGet2D(localMat,row,col);
				c=new CvScalar();
				c.setVal(0, color.getVal(0));
				c.setVal(1, color.getVal(1));
				c.setVal(2, color.getVal(2));
				c.setVal(3, color.getVal(3));
	    	}
	    }
//		for(int row=0;row<3;row++)
//		{
//			for(int col=0;col<3;col++)
//			{
//				color=cvGet2D(localMat,row,col);
//				c=new CvScalar();
//				c.setVal(0, color.getVal(0));
//				c.setVal(1, color.getVal(1));
//				c.setVal(2, color.getVal(2));
//				c.setVal(3, color.getVal(3));
//  				if(row==1&&col==1)
//  				{
//  				   cvSet2D(StaticData.rgbaImage,p.getY(),p.getX(),c);
//  				}
//  				else 
//  				{
//  					Point temp=Constants.add(p, Constants.DIRECTION8[Constants.eightNeibIndex[k]]);
//  					k++;
//  					 cvSet2D(StaticData.rgbaImage,temp.getY(),temp.getX(),c);
//  				} 
//			}
//		}
			
	}
}
