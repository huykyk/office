package cn.edu.xmu.software.util;

import java.awt.Color;
import java.util.List;

import cn.edu.xmu.software.curveExctraction.PointMap;

/**
 * 保存一些常量及通用方法
 * @author sinlly.chen
 *
 */
public class Constants {
	
       public static final Point[] DIRECTION4 = {
    	    new Point(1,  0), //Direction 0
    	    new Point(0,  1), //Direction 1
    	    new Point(-1, 0), //Direction 2
    	    new Point(0, -1), //Direction 3
        };//四方向
       
       public static final Point[] DIRECTION8 = {
    	    new Point(1,  0), //Direction 0
    	    new Point(1,  1), //Direction 1 
    	    new Point(0,  1), //Direction 2
    	    new Point(-1, 1), //Direction 3
    	    new Point(-1, 0), //Direction 4
    	    new Point(-1,-1), //Direction 5
    	    new Point(0, -1), //Direction 6
    	    new Point(1, -1)  //Direction 7
       };//八方向
       
       public static final Point[]  DIRECTION16 = {
    		new Point(2,  0), //Direction 0
    		new Point(2,  1), //Direction 1 
    		new Point(2,  2), //Direction 2
    		new Point(1,  2), //Direction 3
    		new Point(0,  2), //Direction 4
    		new Point(-1, 2), //Direction 5
    		new Point(-2, 2), //Direction 6
    		new Point(-2, 1), //Direction 7
    		new Point(-2, 0), //Direction 8
    		new Point(-2,-1), //Direction 9 
    		new Point(-2,-2), //Direction 10
    		new Point(-1,-2), //Direction 11
    		new Point(0, -2), //Direction 12
    		new Point(1, -2), //Direction 13
    		new Point(2, -2), //Direction 14
    		new Point(2, -1)  //Direction 15
    	};//十六方向
       
       public static final float[] DRT_ANGLE = {
    		0.000000f,
    		0.785398f,
    		1.570796f,
    		2.356194f,
    		3.141593f,
    		3.926991f,
    		4.712389f,
    		5.497787f
    	};
       
      public static final float PI_FLOAT = 3.1415926535897932384626433832795f;
      public static final float  PI2 = PI_FLOAT * 2.0f;
      public static final float  PI_HALF = PI_FLOAT * 0.5f;
      public static final double EPS = 1e-8;		// Epsilon (zero value)
      
      public static final float PI_QUARTER = PI_FLOAT * 0.25f; 
      public static final float PI_EIGHTH = PI_FLOAT * 0.125f;
      public static final int    IND_BG = 0xffffffff;
      public static final int	   IND_NMS = 0xfffffffe;
      public static final int	   IND_SR = 0xfffffffd;
      
      /**
       * 
       * @param number
       * @return
       */
      public static  int cmSgn(float number)
      {
   	   if(Math.abs(number)<Constants.EPS)
   		   return 0;
   	   return number>0?1:-1;
      }
      
      /**
       * 排序
       * @param data
       */
      public static  void sort(List<PointMap> data)
      {
   	   int maxIndex;
   	   for(int i=0;i<data.size();i++)
   	   {
   		   maxIndex=i;
   		   for(int j=i+1;j<data.size();j++)
   		   {
   			   if(data.get(j).getValue()>data.get(maxIndex).getValue())
   				   maxIndex=j;
   		   }
   		   swap(data,i,maxIndex);
   	   }
      }
      
      /**
       * 交换
       * @param data
       * @param i
       * @param j
       */
      public static  void swap(List<PointMap> data,int i,int j)
      {
   	   PointMap p=new PointMap();
   	   p.setValue(data.get(i).getValue());
   	   p.setPoint(new Point(data.get(i).getPoint()));
   	   
   	   data.get(i).setValue(data.get(j).getValue());
   	   data.get(i).setPoint(new Point(data.get(j).getPoint()));
   	   
   	   data.get(j).setValue(p.getValue());
   	   data.get(j).setPoint(new Point(p.getPoint()));
      }
      
      /**
       * 点添加
       * @param a
       * @param b
       * @return
       */
      public static Point add(Point a,Point b)
      {
    	  Point p=new Point();
    	  p.setX(a.getX()+b.getX());
    	  p.setY(a.getY()+b.getY());
    	  return p;
      }
      public static Color[] COLORS={
    	 new Color(128,0,0),
    	 new Color(255,0,0),
    	 new Color(255,0,255),
    	 new Color(255,153,204),
    	 new Color(153,51,0),
    	 new Color(255,102,0),
    	 new Color(255,100,123),
    	 new Color(255,152,0),
    	 new Color(255,204,0),
    	 new Color(255,204,153),
    	 new Color(255,200,200),
    	 new Color(51,51,0),
    	 new Color(128,128,0),
    	 new Color(127,127,128),
    	 new Color(153,204,0),
    	 new Color(255,255,153),
    	 new Color(0,51,0),
    	 new Color(0,0,51),
    	 new Color(0,128,0),
    	 new Color(51,153,102),
    	 new Color(0,128,0),
    	 new Color(51,153,102),
    	 new Color(0,255,0),
    	 new Color(204,255,204),
    	 new Color(0,51,102),
    	 new Color(0,128,128),
    	 new Color(51,204,204),
    	 new Color(0,255,255),
    	 new Color(204,255,255),
    	 new Color(200,255,200),
    	 new Color(0,0,128),
    	 new Color(0,0,255),
    	 new Color(0,127,0),
    	 new Color(51,102,255),
    	 new Color(0,204,255),
    	 new Color(153,204,255),
    	 new Color(51,51,153),
    	 new Color(52,62,128),
    	 new Color(153,50,122),
    	 new Color(200,150,127),
    	 new Color(128,0,128),
    	 new Color(153,51,102),
    	 new Color(204,153,255),
    	 new Color(200,154,125),
    	 new Color(51,51,51),
    	 new Color(128,128,128),
    	 new Color(153,153,153),
    	 new Color(192,192,192)
      };
}
