import java.awt.*;
import javax.swing.*;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Random;
import java.util.Stack;
import javax.swing.JScrollPane;

/**
 * 界面及事件
 * @author sinllychen
 *
 */
public class DrawPanelFrame extends JFrame{
	   /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
    private JLabel numlbl;
    private JTextArea digitNumTxt;
    private JButton generateSeqBtn;
    private JTextArea digitTxt;
    private JButton computeBtn;
    private JLabel timelbl;
    private JTextArea timeTxt;
    private JTextArea finalSeqTxt;
    private JPanel firstPanel;
    private JPanel secondPanel;
    private JPanel thirdPanel;
    private JPanel lastPanel;
    private JScrollPane  scrollTop;
    private JScrollPane  scrollBottom;
    
	   public DrawPanelFrame()
	   {
		   numlbl=new JLabel("随机序列长度:");
		   digitNumTxt=new JTextArea();
		   digitNumTxt.setColumns(10);
		   firstPanel=new JPanel(new FlowLayout(FlowLayout.CENTER));
		   firstPanel.add(numlbl);
		   firstPanel.add(digitNumTxt);
		   
		   digitTxt=new JTextArea();
		   digitTxt.setPreferredSize(new Dimension(100,300));
		   scrollTop=new JScrollPane(digitTxt);
		   secondPanel=new JPanel(new FlowLayout(FlowLayout.CENTER));
		   secondPanel.add(scrollTop);
		   
		   computeBtn=new JButton("计算最长单调增子序列");
		   timelbl=new JLabel("运行时间:");
		   timeTxt=new JTextArea();
		   timeTxt.setColumns(10);
		   thirdPanel=new  JPanel(new FlowLayout(FlowLayout.CENTER));
		   thirdPanel.add(computeBtn);
		   thirdPanel.add(timelbl);
		   thirdPanel.add(timeTxt);
		   
		   finalSeqTxt=new JTextArea();
		   finalSeqTxt.setPreferredSize(new Dimension(100,300));
		   scrollBottom=new JScrollPane(finalSeqTxt);
		   lastPanel=new JPanel(new FlowLayout(FlowLayout.CENTER));
		   lastPanel.add(finalSeqTxt);
		   this.setLayout(new FlowLayout());
           this.add(firstPanel);
           this.add(secondPanel);
           this.add(thirdPanel);
           this.add(lastPanel);
		   undo.addActionListener(
				   new ActionListener()
				   {
					  
					  public void actionPerformed(ActionEvent e) {
						shape.undoDrawShape();
						
					}
				   }
				   );
		   clear.addActionListener(
				   new ActionListener()
				   {
					   public void actionPerformed(ActionEvent e)
					   {
						   shape.clearDrawing();
						   minValuelbl.setText("");
						   exeTimeLabel.setText("");
						   pointAtxt.setText("");
						   pointBtxt.setText("");
					   }
				   }
				   );
		   drawPntBtn.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				ifDraw=true;
				shape.clearDrawing();
				shape.setDrawStatus(ifDraw);
				shape.setIfcmtClosest(false);
			}
			   
		   });
		   randomPntBtn.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				ifDraw=false;
				shape.setDrawStatus(ifDraw);
				shape.clearDrawing();
				Random random=new Random();
				Stack<MyShape> myshape=new Stack<MyShape>();
				ArrayList<MPoint> myPoints=new ArrayList<MPoint>();
				int n=Integer.valueOf(pointNum.getText().toString());
				long startTime=System.currentTimeMillis(); 
				for(int i=0;i<n;i++)
				{
					MPoint point=new MPoint();
					point.setX(random.nextDouble()*10000);
					point.setY(random.nextDouble()*10000);
					point.setRadius(pointSize);
					myshape.push(point);
					myPoints.add(point);
				}
				long endTime=System.currentTimeMillis(); 
				System.out.println("随机生成点时间:"+(endTime-startTime)+"ms");
				shape.setShapes(myshape);
				shape.setPoints(myPoints);
				shape.setIfcmtClosest(false);
				shape.repaint();
			}
		   });
		   cptMinDistBtn.addActionListener(new ActionListener(){

				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
					ifDraw=false;
					shape.setDrawStatus(ifDraw);
					shape.setIfcmtClosest(true);
					long startTime=System.nanoTime(); 
					CommonMethod.quickSortX(DrawPanel.getPoints(), 0, DrawPanel.getPoints().size()-1);
/*					CommonMethod.mergeSortX(DrawPanel.getPoints(), 0, DrawPanel.getPoints().size()-1);*/
					double d=CommonMethod.closest(DrawPanel.getPoints(), 0, DrawPanel.getPoints().size()-1, pntA, pntB);
					long endTime=System.nanoTime();
					System.out.println("分治法算法运行时间"+(endTime-startTime)/1000000+"ms");
					DecimalFormat df=new DecimalFormat(".####");
					if(String.valueOf((double)(endTime-startTime)/1000000).substring(0,1).equals("0"))
					    exeTimeLabel.setText("0"+df.format((double)(endTime-startTime)/1000000)+"ms");
					else
						exeTimeLabel.setText(df.format((double)(endTime-startTime)/1000000)+"ms");
					if(String.valueOf(d).substring(0,1).equals("0"))
					    minValuelbl.setText("0"+String.valueOf(df.format(d)));
					else 
						minValuelbl.setText(String.valueOf(df.format(d)));
					pointAtxt.setText("("+df.format(pntA.getX())+","+df.format(pntA.getY())+")");
					pointBtxt.setText("("+df.format(pntB.getX())+","+df.format(pntB.getY())+")");
					shape.setPntA(pntA);
					System.out.println(String.valueOf(d)+"      "+"最近点对为:"+"A="+"("+pntA.getX()+","+pntA.getY()+")"+","+"B="+"("+pntB.getX()+","+pntB.getY()+")");
					shape.setPntB(pntB);
					shape.setDrawColor(Color.RED);
					shape.repaint();
				}
				   
			   });
		   cptGeneralBtn.addActionListener(new ActionListener(){

				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
					ifDraw=false;
					shape.setDrawStatus(ifDraw);
					shape.setIfcmtClosest(true);
					long startTime=System.nanoTime(); 
					double d=CommonMethod.generalClosest(DrawPanel.getPoints(), 0, DrawPanel.getPoints().size()-1, pntA, pntB);
					long endTime=System.nanoTime();
					System.out.println("普通算法运行时间"+(endTime-startTime)/1000000+"ms");
					DecimalFormat df=new DecimalFormat(".####");
					if(String.valueOf((double)(endTime-startTime)/1000000).substring(0,1).equals("0"))
					    exeTimeLabel.setText("0"+df.format((double)(endTime-startTime)/1000000)+"ms");
					else
						exeTimeLabel.setText(df.format((double)(endTime-startTime)/1000000)+"ms");
					if(String.valueOf(d).substring(0,1).equals("0"))
					    minValuelbl.setText("0"+String.valueOf(df.format(d)));
					else 
						minValuelbl.setText(String.valueOf(df.format(d)));
					pointAtxt.setText("("+df.format(pntA.getX())+","+df.format(pntA.getY())+")");
					pointBtxt.setText("("+df.format(pntB.getX())+","+df.format(pntB.getY())+")");
					shape.setPntA(pntA);
					System.out.println(String.valueOf(d)+"      "+"最近点对为:"+"A="+"("+pntA.getX()+","+pntA.getY()+")"+","+"B="+"("+pntB.getX()+","+pntB.getY()+")");
					shape.setPntB(pntB);
					shape.setDrawColor(Color.GREEN);
					shape.repaint();
				}
				   
			   });
		   
	   }
	   
	/**
	 * @return the drawPntBtn
	 */
	public JButton getDrawPntBtn() {
		return drawPntBtn;
	}
	/**
	 * @param drawPntBtn the drawPntBtn to set
	 */
	public void setDrawPntBtn(JButton drawPntBtn) {
		this.drawPntBtn = drawPntBtn;
	}
	/**
	 * @return the randomPntBtn
	 */
	public JButton getRandomPntBtn() {
		return randomPntBtn;
	}
	/**
	 * @param randomPntBtn the randomPntBtn to set
	 */
	public void setRandomPntBtn(JButton randomPntBtn) {
		this.randomPntBtn = randomPntBtn;
	}
	/**
	 * @return the cptMinDistBtn
	 */
	public JButton getCptMinDistBtn() {
		return cptMinDistBtn;
	}
	/**
	 * @param cptMinDistBtn the cptMinDistBtn to set
	 */
	public void setCptMinDistBtn(JButton cptMinDistBtn) {
		this.cptMinDistBtn = cptMinDistBtn;
	}
	/**
	 * @return the minlbl
	 */
	public JLabel getMinlbl() {
		return minlbl;
	}
	/**
	 * @param minlbl the minlbl to set
	 */
	public void setMinlbl(JLabel minlbl) {
		this.minlbl = minlbl;
	}
	/**
	 * @return the scrollPane
	 */
	public JScrollPane getScrollPane() {
		return scrollPane;
	}
	/**
	 * @param scrollPane the scrollPane to set
	 */
	public void setScrollPane(JScrollPane scrollPane) {
		this.scrollPane = scrollPane;
	}
	/**
	 * @param pntA the pntA to set
	 */
	public void setPntA(MPoint pntA) {
		this.pntA = pntA;
	}
	/**
	 * @return the pntB
	 */
	public MPoint getPntB() {
		return pntB;
	}
	/**
	 * @param pntB the pntB to set
	 */
	public void setPntB(MPoint pntB) {
		this.pntB = pntB;
	}
	  /**
		 * @return the pntA
		 */
		public MPoint getPntA() {
			return pntA;
		}
		   public static void main(String[] args)
		   {
		       DrawPanelFrame f=new DrawPanelFrame();
			   f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			   f.setSize(1000,600);
			   f.setVisible(true);
		   }
}
