package com.demo;

import java.lang.reflect.Type;
import java.util.List;


import com.google.gson.Gson;
import com.google.gson.GsonBuilder;


public class JsonUtils {
    private static GsonBuilder  jsonBuilder=new GsonBuilder();
    private static Gson json=jsonBuilder.create();
    /**
     * 将普通对象（类）转换为json类型字符串
     * @param o
     * @return
     */
    public  static String TransObjectToJson(Object o)
    {
    	return json.toJson(o);
    }
    /**
     * 将数组对象包括List对象转换为json类型字符串
     * @param o  要转换的对象
     * @param type   为TypeToken类型，new TypeToken<List<String>>{}.getType();
     * @return
     */
    public static  String TransArrayToJson(Object o,Type type)
    {
    	return json.toJson(o,type);
    }
    /**
     * 将Map对象转换为json类型字符串
     * @param o  要转换的对象
     * @param type   为TypeToken类型，new TypeToken<Map<String,String>>{}.getType();
     * @return
     */
    public  static  String TransMapToJson(Object o,Type type)
    {
    	return json.toJson(o,type);
    }
    /**
     * 将json字符串转换为普通对象
     * @param jsonString  json格式的字符串
     * @param c   表示数组对象中元素的数据类型
     * @return
     */
    public  static  Object TransJsonToObject(String jsonString,Class c)
    {
    	return json.fromJson(jsonString, c);
    }
    
    /**
     * 将json字符串转换为数组对象
     * @param jsonString     json格式的字符串
     * @param c  表示数组对象中元素的数据类型
     * @return
     */
    public  static  Object[]  TransJsonToArray(String jsonString,Type type)
    {
        return  (Object[]) json.fromJson(jsonString, type);
    }
    /**
     * 将json字符串转换为List对象
     * @param jsonString   json格式的字符串
     * @param c   表示List对象中元素的数据类型
     * @return
     */
    public  static  List TransJsonToList(String jsonString,Type type)
    {
       return (List) json.fromJson(jsonString, type);
    }
}
