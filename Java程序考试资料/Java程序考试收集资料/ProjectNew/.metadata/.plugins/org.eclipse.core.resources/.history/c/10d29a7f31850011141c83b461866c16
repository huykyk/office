package xmu.software.cxj.chatproc.client;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import xmu.software.cxj.chatproc.client.FileOperate;
import xmu.software.cxj.chatproc.shared.pojo.Information;
import xmu.software.cxj.chatproc.shared.service.InfoService;
import xmu.software.cxj.chatproc.shared.service.InfoServiceAsync;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class ChatProc implements EntryPoint {
    private final InfoServiceAsync infoService=GWT.create(InfoService.class);

	@Override
	public void onModuleLoad() {
		// TODO Auto-generated method stub
		final Button sendButton = new Button("Send");
		final TextBox sendField = new TextBox();
		final String from="cxj";
		final String to="gx";
		final Calendar c=Calendar.getInstance();
		sendField.setFocus(true);
		sendField.setWidth("300px");
		sendField.setHeight("100px");
        final VerticalPanel  czPanel=new VerticalPanel();
        final  TextBox receiveField=new TextBox();
        receiveField.setWidth("300px");
        receiveField.setHeight("200px");
      //  receiveField.setReadOnly(true);
        receiveField.setFocus(true);
		// We can add style names to widgets
		sendButton.addStyleName("sendButton");
		   czPanel.add(receiveField);
	        czPanel.add(sendField);
	        czPanel.add(sendButton);
		// Add the nameField and sendButton to the RootPanel
		// Use RootPanel.get() to get the entire body element
		RootPanel.get("nameFieldContainer").add(czPanel);
		 // Create a handler for the saveOrUpdateButton and employeeInfoField   
		
        class SaveOrUpdateHandler implements ClickHandler {   
            /**  
             * Fired when the user clicks on the saveOrUpdateButton.  
             */  
            public void onClick(ClickEvent event) {   
                sendInfoToServer();   
            }   
 
  
            /**  
             * Send the employee info from the employeeInfoField to the server and wait for a response.  
             */  
            private void sendInfoToServer() {   
                // First, we validate the input.   
                String sendText=sendField.getText();   
                final Information infoData=new Information(from,to,c,sendText);
                infoService.saveOrUpdateInfo(from,to,Calendar.getInstance(),sendText,
                        new AsyncCallback<Void>() {   
                            public void onFailure(Throwable caught) {   
                                // Show the RPC error message to the user   
                             Window.alert("failure");
                            }   
  
                            public void onSuccess(Void noAnswer) {   
                             FileOperate operate=new FileOperate();
                             List<String> msg=new ArrayList<String>();
                             msg=operate.readData("msg.txt");
                             for(int i=0;i<=msg.size();i+=2)
                             {
                            	 String temp=infoData.getFrom()+"  "+msg.get(i)+"\n"+msg.get(i+1)+"\n";
                            	 receiveField.setText(receiveField.getText()+temp);
                             }
                              String data=infoData.getDateString()+"\n"+infoData.getContent()+"\n";
                              receiveField.setText(receiveField.getText()+infoData.getFrom()+" "+data);
                              operate.writeValue(data, "msg.txt", true);
                              Window.alert("success");
                            }   
                        });   
            }
        }   
        SaveOrUpdateHandler  sendHandler=new  SaveOrUpdateHandler();
        sendButton.addClickHandler(sendHandler);
	}
	
}
