package cn.edu.xmu.software.eventprocesser;

import java.util.ArrayList;

import cn.edu.xmu.software.util.InputTrace;
import cn.edu.xmu.software.util.Point;
import cn.edu.xmu.software.util.StaticData;

/**
 * 常用在eventProcesser中个各类公共的一些工具方法
 * @author sinlly.chen
 *
 */
public class MethodTool {
	/**
	 * 将当前状态保存到栈中
	 */
	public static void pushState()
	{
		ArrayList<InputTrace> curvesTemp=new ArrayList<InputTrace>();
		for(int i=0;i<StaticData.allCurves.size();i++)
			curvesTemp.add(StaticData.allCurves.get(i));
		StaticData.undoStack.push(curvesTemp);
	}
	/**
	 * 计算两点之间距离
	 * @param a
	 * @param b
	 * @return
	 */
	public static  int getDis(Point a,Point b){
		int x1=a.getX()-b.getX();
		int x2=a.getY()-b.getY();
		int dis=(int) Math.sqrt(x1*x1+x2*x2);
		return dis;
	}
	/**
	 * 得到左右曲线的正负偏移,分为8种情况，分别对8种情况进行分析得出结果
	 * @param V
	 * @return
	 */
	public static  double[] getPMValue(double[] V){
		double[] PM=new double[2];
		if(V[1]==0){
			PM[1]=1;
		}
		else if(V[0]==0){
			PM[0]=-1;
		}
		else{
			PM[0]=-1;
			PM[1]=1;
		}
		return PM;
	}
	/**
	 * 计算法线
	 * @param v
	 * @return
	 */
	public static  double[] getNormal(double[] v){
		double[] N=new double[2];
		N[0]=10*v[1];
		N[1]=10*v[0];
		double distance=Math.sqrt((double)(N[0]*N[0]+N[1]*N[1]));
		if(distance>0.0000001){
			N[0]=N[0]/distance*StaticData.curveOffset;
			N[1]=N[1]/distance*StaticData.curveOffset;
		}
		return N;
	}
}
